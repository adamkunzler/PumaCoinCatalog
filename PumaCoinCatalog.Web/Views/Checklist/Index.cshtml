@model PumaCoinCatalog.Web.Models.Checklist.ChecklistModel

@using PumaCoinCatalog.Web.Infrastructure

@{
    ViewBag.Title = Model.Title;
}

@section pageHeader {
    <div class="coin-breadcrumb">
        Checklists
        <span>&#x25BA;</span>
        @Model.Title        
        <span style="font-size: 18px;">@Model.CoinTypeDisplay</span>
    </div>
}

<style type="text/css">
    .progress {        
        height: 50px;
        margin: 0;
    }

        .progress-label {            
            font-weight: 600;
            font-size: 18px;
            margin-top: 5px;            
        }

    .coins-in-collection .progress-bar-success {
        background-color: #72B23C;
    } 

    .value-totals {
        font-size: 18px;
        font-weight: 600;
        margin-top: 10px;
    }

        .value-totals .col-md-3 {
            text-align: right;
        }
        
        .value-totals span {
            font-size: 20px;
            font-weight: 800;            
        }
</style>

<div class="checklist-details">    
    <div class="row">
        <div class="col-md-6">
            <img src="data:image/jpg;base64,@Model.Base64Image" alt="@Model.Title" class="coin-image" />
        </div>
        <div class="col-md-4">
            <div class="coins-in-collection">
                <div class="progress">
                    <div class="progress-bar progress-bar-success" role="progressbar"
                         aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"
                         style="width: 60%;"></div>
                </div>
                <span class="progress-label">Total Coins in Collection: 17 / 35 </span>
            </div>
            <div class="value-totals">
                <div class="row face-value-total">
                    <div class="col-md-5">Face Value Total:</div>
                    <div class="col-md-3"><span>$50.34</span></div>
                </div>
                <div class="row bullion-value-total">
                    <div class="col-md-5">Bullion Value Total:</div>
                    <div class="col-md-3"><span>$75.42</span></div>
                </div>
                <div class="row estimated-value-total">
                    <div class="col-md-5">Estimated Value Total:</div>
                    <div class="col-md-3"><span>$107.19</span></div>
                </div>
            </div>
        </div>      
        <div class="col-md-2">
            <div class="checklist-actions">
                <button type="button" class="btn btn-primary btn-lg btn-block">Export</button>
                <button type="button" class="btn btn-primary btn-lg btn-block">Delete</button>                
            </div>
        </div>
    </div>
    <hr />
    <div class="row">                
        <div class="col-md-12">
            <div class="table-responsive">
                <table class="coin-list table table-striped">
                    <thead>
                        <tr>
                            <th style="display:none;">Id</th>
                            <th style="display:none;">CoinId</th>                            
                            <th>Year</th>
                            <th>Variety</th>
                            <th style="text-align: center;">Collected</th>
                            <th style="text-align: center;">Grade</th>
                            <th style="text-align: center;">Est. Value</th>
                            <th style="text-align: right;">Mintage</th>
                            <th style="text-align: center;">KM #</th>
                            <th style="text-align: center;">NumisMedia</th>
                            <th style="text-align: center;">NGC</th>
                            <th style="text-align: center;">PCGS</th>                                                                                    
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var coin in Model.ChecklistCoins)
                        {
                            <tr class="checklist-coin-row">
                                <td class="checklist-coin-id" style="display:none;">@coin.Id</td>
                                <td style="display:none;">@coin.CoinModel.Id</td>
                                <td>@coin.CoinModel.Year</td>
                                <td>@coin.CoinModel.Variety</td>
                                <td style="text-align: center;">
                                    <label>
                                        <input class="checkbox in-collection-checkbox" type="checkbox" @(Convert.ToBoolean(coin.InCollection) == true ?   "checked='checked'" : string.Empty)/>
                                        <span></span>
                                    </label>
                                </td>
                                <td style="text-align: center; width: 150px;">
                                    <select class="form-control ddl-grade">
                                        <option @(coin.AdamGrade == 1 ? "selected='selected'" : string.Empty) value="1">Poor</option>
                                        <option @(coin.AdamGrade == 2 ? "selected='selected'" : string.Empty) value="2">Fair</option>
                                        <option @(coin.AdamGrade == 4 ? "selected='selected'" : string.Empty) value="4">Good</option>
                                        <option @(coin.AdamGrade == 8 ? "selected='selected'" : string.Empty) value="8">Very Good</option>
                                        <option @(coin.AdamGrade == 12 ? "selected='selected'" : string.Empty) value="12">Fine</option>
                                        <option @(coin.AdamGrade == 20 ? "selected='selected'" : string.Empty) value="20">Very Fine</option>
                                        <option @(coin.AdamGrade == 40 ? "selected='selected'" : string.Empty) value="40">Ex. Fine</option>
                                        <option @(coin.AdamGrade == 50 ? "selected='selected'" : string.Empty) value="50">AU</option>
                                        <option @(coin.AdamGrade == 58 ? "selected='selected'" : string.Empty) value="58">Uncirculated</option>
                                        <option @(coin.AdamGrade == 60 ? "selected='selected'" : string.Empty) value="60">MS+</option>                                        
                                    </select>
                                </td>
                                <td style="text-align: right; width: 100px;">                                    
                                    <input type="text" class="form-control estimated-value-textbox" value="@coin.ValueEstimate" style="text-align: right;"/>                                    
                                </td>
                                <td style="text-align: center;">
                                    @if (coin.CoinModel.Mintage == 0)
                                    { <span>-</span> }
                                    else
                                    { <span>@string.Format("{0:0,0}", coin.CoinModel.Mintage)</span> }
                                </td>
                                <td style="text-align: center;">@coin.CoinModel.KmNumber</td>
                                <td style="text-align: center;"><a href="@LinkHelper.NumisMediaLink(coin.CoinModel.NumisMediaId)" target="_blank">@coin.CoinModel.NumisMediaId</a></td>
                                <td style="text-align: center;"><a href="@LinkHelper.NgcLink(coin.CoinModel.NgcId)" target="_blank">@coin.CoinModel.NgcId</a></td>
                                <td style="text-align: center;"><a href="@LinkHelper.PcgsLink(coin.CoinModel.PcgsId)" target="_blank">@coin.CoinModel.PcgsId</a></td>                                
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section scripts {

    <script type="text/javascript">
        $(document).ready(function () {
            resetMenu();
            setActiveMenu('/Checklist/AllChecklists');

            //
            // get the checklist coin id for a cell in a row
            //
            function getChecklistCoinId(elem) {                
                var row = $(elem).closest(".checklist-coin-row");
                var trCoinId = $(row).children(".checklist-coin-id");
                var checklistCoinId = $(trCoinId).text();
                return checklistCoinId;
            }

            function addCoinToChecklist(elem) {
                var row = $(elem).closest(".checklist-coin-row");
                var checkbox = $(row).find(".in-collection-checkbox");
                $(checkbox).prop("checked", true);
            }

            //
            // add or remove coin from checklist
            //
            $(".in-collection-checkbox").change(function () {
                var checklistCoinId = getChecklistCoinId(this);
                
                if (this.checked) {
                    // set flag to true                    
                    $.ajax({
                        type: 'POST',
                        url: '/Checklist/UpdateChecklistCoinAddToChecklist?checklistCoinId=' + checklistCoinId,
                        success: function (result) {
                            //console.log('coin add successfully');
                        }
                    });
                } else {
                    var result = confirm("You sure you want to remove it from your collection?");
                    if (result == true) {
                        // set flag to false
                        $.ajax({
                            type: 'POST',
                            url: '/Checklist/UpdateChecklistCoinRemoveFromChecklist?checklistCoinId=' + checklistCoinId,
                            success: function (result) {
                                //console.log('coin removed successfully');
                            }
                        });
                    }
                    else {
                        $(this).prop("checked", true);
                    }
                }
            });

            //
            // updated grade
            //
            $(".ddl-grade").change(function () {
                var thisthis = this;
                var value = $(this).val();                
                var checklistCoinId = getChecklistCoinId(this);
                
                $.ajax({
                    type: 'POST',
                    url: '/Checklist/UpdateChecklistCoinGrade?checklistCoinId=' + checklistCoinId + '&value=' + value,
                    success: function (result) {
                        //console.log('grade updated successfully');
                        addCoinToChecklist(thisthis);
                    }
                });
            });

            //
            // update estimated value
            //
            $(".estimated-value-textbox").blur(function () {
                var thisthis = this;
                var value = $(this).val();

                if (!isNumeric(value)) {
                    console.log('bad number');
                    $(this).val('');
                    return;
                }

                var checklistCoinId = getChecklistCoinId(this);
                
                $.ajax({
                    type: 'POST',
                    url: '/Checklist/UpdateChecklistCoinEstimatedValue?checklistCoinId=' + checklistCoinId + '&value=' + value,
                    success: function (result) {
                        //console.log('estimated value updated successfully');
                        addCoinToChecklist(thisthis);
                    }
                });
            });
        });
    </script>

}
